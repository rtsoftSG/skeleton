package test

import (
	"context"
	"io"
	"net/http"
	"golang.org/x/sync/errgroup"
	"strings"
	"testing"
	"time"
	"{{.module}}/internal"

	"github.com/stretchr/testify/suite"

	"{{.module}}/internal/config"
)

type APPServerTS struct {
	suite.Suite
	app    *internal.App
	cancel context.CancelFunc
	eg     *errgroup.Group
}

func (a *APPServerTS) SetupSuite() {
	a.app = internal.NewApp(&config.Configuration{})

	var ctx context.Context
	ctx, a.cancel = context.WithCancel(context.Background())

	eg, appCtx := errgroup.WithContext(ctx)
	a.eg = eg

	go func() {
		a.NoError(a.app.Run(eg, appCtx))
	}()

	time.Sleep(time.Second)
}

func (a *APPServerTS) TearDownSuite() {
	a.cancel()

	_ = a.eg.Wait()
}

func TestAPPServer(t *testing.T) {
	suite.Run(t, new(APPServerTS))
}

// TestPingEndpoint - send request to ping-endpoint and assert response.
func (a *APPServerTS) TestPingEndpoint() {
	resp, err := http.DefaultClient.Get("http://localhost:8080/api/ping")
	if err != nil {
		a.T().Fatalf("http error %s", err.Error())
	}
	defer resp.Body.Close()

	data, err := io.ReadAll(resp.Body)
	a.NoError(err)

	a.Equal("{\"result\":\"pong\"}", strings.TrimSpace(string(data)))
}
