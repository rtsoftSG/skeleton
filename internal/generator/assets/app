package internal

import (
	"context"
	"{{.module}}/internal/config"
	"fmt"
	"net/http"
	httptransport "{{.module}}/internal/transport/http"
	"{{.module}}/internal/endpoint"
	"time"
{{- if .use_gokit_logger}}
	kitlog "github.com/go-kit/kit/log"
	"github.com/go-kit/kit/log/level"
{{- end}}
{{- if .use_zap_logger}}
    "go.uber.org/zap"
{{- end}}
{{- if .use_clickhouse}}
	"database/sql"
    _ "github.com/ClickHouse/clickhouse-go"
{{- end}}
{{- if .use_postgresql}}
	"github.com/jackc/pgx/v4/pgxpool"
{{- end}}

{{- if .use_consul}}
    "net"
    consulapi "github.com/hashicorp/consul/api"
    "strconv"
{{- end}}
{{- if .use_jaeger}}
    "{{.module}}/internal/infrastructure/tracer"
{{- end}}

	"golang.org/x/sync/errgroup"
)

const closeHttpTimeout = 5 * time.Second

type Option func(*App)

{{if .use_gokit_logger}}
// WithLogger adding logger option.
func WithLogger(l kitlog.Logger) Option {
	return func(a *App) {
		a.logger = l
	}
}
{{- end}}
{{- if .use_zap_logger}}
// WithLogger adding logger option.
func WithLogger(l *zap.Logger) Option {
	return func(a *App) {
		a.logger = l
	}
}
{{- end}}

// App is main application instance.
type App struct {
	cfg     *config.Configuration
	httpSrv *http.Server
    {{- if .use_gokit_logger}}
	logger kitlog.Logger
	{{- end}}
    {{- if .use_zap_logger}}
	logger *zap.Logger
	{{- end}}
}

// NewApp returns instance of app.
func NewApp(cfg *config.Configuration, opts ...Option) *App {
	app := &App{
		cfg:    cfg,
        {{- if .use_gokit_logger}}
        logger: kitlog.NewNopLogger(),
        {{- end}}
		{{- if .use_zap_logger}}
		logger: zap.NewNop(),
		{{- end}}
	}

	for _, opt := range opts {
		opt(app)
	}

	return app
}

// Run lunch application.
func (a *App) Run(ctx context.Context) (err error) {
	eg := errgroup.Group{}
    {{- if .use_jaeger}}

    closer := tracer.InitGlobalTracer(a.cfg.Jaeger.ServiceName, a.cfg.Jaeger.AgentAddr)
    defer closer.Close()
    {{- end }}
    {{- if .use_clickhouse}}

    chConn, err := sql.Open("clickhouse", a.cfg.Ch.DSN)
    if err != nil {
        return fmt.Errorf("clickhouse: %w", err)
    }
    defer chConn.Close()

    if err = chConn.Ping(); err != nil {
        return fmt.Errorf("clickhouse ping: %w", err)
    }
    {{- end}}
    {{- if .use_postgresql}}

    pool, err := pgxpool.Connect(ctx, fmt.Sprintf("%s?pool_max_conns=%d", a.cfg.Postgres.DSN, a.cfg.Postgres.MaxPoolConnections))
    if err != nil {
        return fmt.Errorf("postgres ping: %w", err)
    }
    defer pool.Close()
    {{- end}}
    {{- if .use_consul}}

    consulCfg := consulapi.DefaultConfig()
    consulCfg.Address = a.cfg.Consul.Addr

    consulClient, err := consulapi.NewClient(consulCfg)
    if err != nil {
        return fmt.Errorf("create consul client: %w", err)
    }

    if err = a.registerInConsul(consulClient); err != nil {
        return err
    }
    defer func() {
        if err = a.deregisterInConsul(consulClient); err != nil {
            {{- if .use_gokit_logger}}
            level.Error(a.logger).Log("deregister app in consul", err)
            {{- end}}
            {{- if .use_zap_logger}}
            a.logger.Error("deregister app in consul", zap.Error(err))
            {{- end}}
        }
    }()
    {{- end}}

	a.httpSrv = httptransport.NewServer(endpoint.NewEndpoints(), a.logger)
	eg.Go(func() error {
		if err = a.httpSrv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			return fmt.Errorf("http serve: %w", err)
		}

		return nil
	})

	return eg.Wait()
}

{{- if .use_consul}}

func (a *App) registerInConsul(client *consulapi.Client) error {
    host, port, err := net.SplitHostPort(a.cfg.Consul.AgentAddr)
    if err != nil {
        return fmt.Errorf("parse consul agent addr: %w", err)
    }

    p, err := strconv.Atoi(port)
    if err != nil {
        return fmt.Errorf("parse consul agent port: %w", err)
    }

    if err = client.Agent().ServiceRegister(&consulapi.AgentServiceRegistration{
        ID:      a.cfg.Consul.ServiceID,
        Name:    a.cfg.Consul.ServiceName,
        Port:    p,
        Address: fmt.Sprintf("http://%s", host),
        Check: &consulapi.AgentServiceCheck{
            Interval: "5s",
            Timeout:  "3s",
            HTTP:     fmt.Sprintf("http://%s:%d/health-check", host, p),
        },
    }); err != nil {
        return fmt.Errorf("sign up service via consul: %w", err)
    }

	return nil
}

func (a *App) deregisterInConsul(client *consulapi.Client) error {
	if err := client.Agent().ServiceDeregister(a.cfg.Consul.ServiceID); err != nil {
		return fmt.Errorf("deregister service in consul: %w", err)
	}

	return nil
}
{{- end }}

func (a *App) Stop() error {
	ctx, cancel := context.WithTimeout(context.Background(), closeHttpTimeout)
	defer cancel()

	if err := a.httpSrv.Shutdown(ctx); err != nil {
		return fmt.Errorf("http closing error: %w", err)
	}

	return nil
}
