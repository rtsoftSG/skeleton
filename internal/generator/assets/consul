package consul

import (
	"fmt"
	"github.com/hashicorp/consul/api"
	"net"
	"strconv"
)

type Consul struct {
	client *api.Client
}

func New(client *api.Client) *Consul {
	return &Consul{client: client}
}

func (c *Consul) Register(agentAddr string, serviceName, serviceId string) error {
	host, port, err := net.SplitHostPort(agentAddr)
	if err != nil {
		return fmt.Errorf("parse consul agent addr: %w", err)
	}

	p, err := strconv.Atoi(port)
	if err != nil {
		return fmt.Errorf("parse consul agent port: %w", err)
	}

	if err = c.client.Agent().ServiceRegister(&api.AgentServiceRegistration{
		ID:      serviceId,
		Name:    serviceName,
		Port:    p,
		Address: fmt.Sprintf("http://%s", host),
		Check: &api.AgentServiceCheck{
			Interval: "5s",
			Timeout:  "3s",
			HTTP:     fmt.Sprintf("http://%s:%d/health-check", host, p),
		},
	}); err != nil {
		return fmt.Errorf("sign up service via consul: %w", err)
	}

	return nil
}

func (c *Consul) Deregister(serviceId string) error {
	if err := c.client.Agent().ServiceDeregister(serviceId); err != nil {
		return fmt.Errorf("deregister service in consul: %w", err)
	}

	return nil
}