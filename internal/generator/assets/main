package main

import (
	"context"
	"flag"
	{{- if .use_gokit_logger}}
	"github.com/go-kit/kit/log/level"
	kitlog "github.com/go-kit/kit/log"
	"os"
	{{- end}}
	"log"
	{{if .use_zap_logger}}"go.uber.org/zap"{{end}}
	"os/signal"
	"syscall"
	"{{.module}}/internal"
	"{{.module}}/internal/config"
	applogger "{{.module}}/internal/infrastructure/logger"
	{{- if .use_consul}}
        consulapi "github.com/hashicorp/consul/api"
        "{{.module}}/internal/infrastructure/consul"
    {{- end}}
    {{- if .use_jaeger}}
        "{{.module}}/internal/infrastructure/tracer"
    {{- end}}
    "golang.org/x/sync/errgroup"
)

var cfgName = flag.String("cfg", "config", "path to config file")

func main() {
    flag.Parse()

    os.Exit(run())
}

func run() int {
	cfg, err := config.LoadConfig(*cfgName)
	if err != nil {
		log.Println("load configuration" ,err)
		return 1
	}

	logger := applogger.NewLogger()

    ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
    defer cancel()
    {{- if .use_consul}}

    // register service in consul.
    {
        consulCfg := consulapi.DefaultConfig()
        consulCfg.Address = cfg.Consul.Addr
        consulClient, err := consulapi.NewClient(consulCfg)
        if err != nil {
            {{logErr "logger" "create consul client" "err"}}
            return 1
        }

        c := consul.New(consulClient)
        err = c.Register(cfg.Consul.AgentAddr, cfg.Consul.ServiceName, cfg.Consul.ServiceID)
        if err != nil {
            {{logErr "logger" "register consul" "err"}}
            return 1
        }

        {{log "logger" "info" "register application in consul"}}
        defer func() {
            if err = c.Deregister(cfg.Consul.ServiceID); err != nil {
                {{logErr "logger" "deregister consul" "err"}}
            }
        }()
    }
    {{- end }}
    {{- if .use_jaeger}}

    // init jaeger tracer.
    {
        closer := tracer.InitGlobalTracer(cfg.Jaeger.ServiceName, cfg.Jaeger.AgentAddr)
        defer func() {
            if err = closer.Close(); err != nil {
                {{logErr "logger" "close tracer" "err"}}
            }
        }()
        {{log "logger" "info" "jaeger tracer initialized"}}
    }
    {{- end }}

    app := internal.NewApp(cfg, internal.WithLogger(logger))
    eg, appCtx := errgroup.WithContext(ctx)

    {{log "logger" "info" "running application"}}
    defer {{log "logger" "info" "application stopped"}}

    if err = app.Run(eg, appCtx); err != nil {
        {{logErr "logger" "init main" "err"}}
        return 1
    }

    return 0
}